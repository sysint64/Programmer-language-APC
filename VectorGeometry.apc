//
module math.vector;
//
alias TVector = <4 x float>;
alias TMatrix = [4 x <4 x float>];

alias TVector2f = <2 x float>;
alias TVector3f = <3 x float>;
alias TVector4f = TVector;

alias TMatrix2f = [2 x <2 x float>];
alias TMatrix3f = [3 x <3 x float>];
alias TMatrix4f = [4 x <4 x float>];

//
def binary * (A : float; B : <4 x float>) : <4 x float>;
	Result = <A, A, A, A>*b;
end;

def MatrixMul (const M1, M2: TMatrix) : TMatrix inline
	//
	for var i : int = 0, 3 do
		ci = M1[i][0]*M2[0];
		
		for var j : int = 1, 3 do
			ci += M1[i][j]*M2[j];
		
		Result[i] = ci;
	end;
	//
end;
